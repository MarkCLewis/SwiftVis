/* Generated by Together */

package edu.swri.swiftvis;

/**
* This class represents one "row" of data in a data file.  They are immutable
* so that I can share them freely without having to do extra copying.  When
* functions are applied to certain fields in them that will require the creation
* of new sets of them, but that would have been needed anyway.  This way, as long
* as a function isn't applied I only have to create an array or vector or
* references and not duplicate all of the data.
*
* Each data element knows what DataSource it comes from so that it can give
* you extra information about what each parameter or value means without each one
* having to store that.  The data in an element is separated into parameters and
* values.  The parameters are integers for things like particle number or what
* type of particle.  The values are the actual data and can include things like
* time, x, y, etc.
**/
public class DataElement implements java.io.Serializable {
    private DataElement() {
    }

    public DataElement(int[] pars,float[] vals) {
        if(pars.length==0) params=zeroParams;
        else {
            params=new int[pars.length];
            for(int i=0; i<params.length; i++) params[i]=pars[i];
        }
        if(vals.length==0) values=zeroValues;
        else {
            values=new float[vals.length];
            for(int i=0; i<values.length; i++) values[i]=vals[i];
        }
    }

    public DataElement(DataElement de,int par) {
        values=de.values;
        params=new int[de.params.length+1];
        for(int i=0; i<params.length-1; i++) params[i]=de.params[i];
        params[params.length-1]=par;
    }

    public DataElement(DataElement de,int[] pars) {
        values=de.values;
        params=new int[de.params.length+pars.length];
        for(int i=0; i<de.params.length; i++) params[i]=de.params[i];
        for(int i=0; i<pars.length; i++) params[de.params.length+i]=pars[i];
    }

    public DataElement(DataElement de,float val) {
        params=de.params;
        values=new float[de.values.length+1];
        for(int i=0; i<values.length-1; i++) values[i]=de.values[i];
        values[values.length-1]=val;
    }

    public DataElement(DataElement de,float[] vals) {
        params=de.params;
        values=new float[de.values.length+vals.length];
        for(int i=0; i<de.values.length; i++) values[i]=de.values[i];
        for(int i=0; i<vals.length; i++) values[de.values.length+i]=vals[i];
    }

    public int getNumParams() {
        return params.length;
    }

    public int getParam(int which) {
        return params[which];
    }

    public int getNumValues() {
        return values.length;
    }

    public float getValue(int which) {
        return values[which];
    }

    public DataElement addParam(int par) {
        return new DataElement(this,par);
    }

    public DataElement addValue(float val) {
        return new DataElement(this,val);
    }
    
    public static DataElement replaceParams(DataElement de,int[] pars) {
        DataElement ret=new DataElement();
        ret.params=new int[pars.length];
        for(int i=0; i<ret.params.length; i++) ret.params[i]=pars[i];
        ret.values=de.values;
        return ret;
    }

    public static DataElement replaceValues(DataElement de,float[] vals) {
        DataElement ret=new DataElement();
        ret.params=de.params;
        ret.values=new float[vals.length];
        for(int i=0; i<ret.values.length; i++) ret.values[i]=vals[i];
        return ret;
    }

    private int[] params;
    private float[] values;
    private static final long serialVersionUID=94768146734l;
    
    private static final int[] zeroParams=new int[0];
    private static final float[] zeroValues=new float[0];
}
