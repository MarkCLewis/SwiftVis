/* Generated by Together */
package edu.swri.swiftvis.plot.util;

import javax.swing.*;
import javax.swing.event.*;



import java.awt.*;
import java.awt.event.*;

/**
* This class basically just stores the settings for a Paint so that they can
* be edited and so that multiple different draw objects can use this code.
*/
public class FillOptions implements java.io.Serializable {
    public FillOptions(FillUser o,Color p) {
        user=o;
        currentPaint=p;
    }

    public void edit() {
        if(chooser==null) {
            chooser=new FillChooser();
        }
        chooser.setVisible(true);
    }

    public Color getColor() {
        return currentPaint;
    }

    private FillUser user;

    private transient FillChooser chooser = null;

    private Color currentPaint;

    private static final long serialVersionUID=99257623898467234l;

    /**
     * This class is for a window that is used to alter fill settings.
     */    
    private class FillChooser extends JFrame {
    	public FillChooser() {
            super("Fill Style");
            tmpPaint=currentPaint;
            setupGUI();
        }

    	/**
         * This puts things into the frame.  This GUI needs to have a combo
         * box that allows the user to select what type of fill he/she wants
         * to use.  Depending on what is selected, a different GUI will appear
         * below it.  For a single color they just get a JColorChooser.  For a
         * gradient fill they get two ColorIndicators, a JColorChooser, a
         * cyclic checkbox, and something that allows the user to select the
         * endpoints for the fill.  For a texture fill I need to have a way
         * for them to select an image.  I'll have to think a bit about how to
         * implement that without using the 1.4 libraries.
         */
        private void setupGUI() {
            getContentPane().setLayout(new BorderLayout());

            // Setup the Solid display.
            JPanel solidPanel=new JPanel(new BorderLayout());
            if(currentPaint instanceof Color) {
	            solidChooser=new JColorChooser(currentPaint);
            } else {
	            solidChooser=new JColorChooser();
            }
            solidChooser.getSelectionModel().addChangeListener(new ChangeListener() {
                @Override
                public void stateChanged(ChangeEvent e) {
                    tmpPaint=solidChooser.getColor();
                    tmpPaint=new Color(tmpPaint.getRed(),tmpPaint.getGreen(),tmpPaint.getBlue(),alphaSlider.getValue());
                    solidChooser.setColor(tmpPaint);
                }
            } );
            solidPanel.add(solidChooser,BorderLayout.CENTER);
            JPanel innerPanel=new JPanel(new BorderLayout());
            innerPanel.add(new JLabel("Transparent"),BorderLayout.WEST);
            innerPanel.add(new JLabel("Opaque"),BorderLayout.EAST);
            alphaSlider=new JSlider(0,255,tmpPaint.getAlpha());
            alphaSlider.addChangeListener(new ChangeListener() {
                @Override
                public void stateChanged(ChangeEvent e) { alphaChanged(); }
            } );
            innerPanel.add(alphaSlider,BorderLayout.CENTER);
            solidPanel.add(innerPanel,BorderLayout.SOUTH);
            getContentPane().add(solidPanel,BorderLayout.NORTH);

            // Add bottom buttons
            JPanel tmpPanel=new JPanel(new FlowLayout(FlowLayout.RIGHT));
            JButton button=new JButton("OK");
            button.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) { setPaint(tmpPaint); setVisible(false); }
            } );
            tmpPanel.add(button);
            button=new JButton("Cancel");
            button.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) { setVisible(false); }
            } );
            tmpPanel.add(button);
            button=new JButton("Apply");
            button.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) { setPaint(tmpPaint); }
            } );
            tmpPanel.add(button);
            getContentPane().add(tmpPanel,BorderLayout.SOUTH);

            setSize(400,500);
        }

        private void alphaChanged() {
            Color oCol=tmpPaint;
            Color tmp=new Color(oCol.getRed(),oCol.getGreen(),oCol.getBlue(),alphaSlider.getValue());
            if(tmpPaint.equals(tmp)) return;
            tmpPaint=tmp;
            solidChooser.setColor(tmpPaint);
        }

        private void setPaint(Color p) {
            currentPaint=p;
            user.applyFill(FillOptions.this);
        }

        private JColorChooser solidChooser;
        private JSlider alphaSlider;

        private Color tmpPaint;

        private static final long serialVersionUID=67834098237309846l;
    }
}
