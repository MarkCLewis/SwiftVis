/* Generated by Together */

package edu.swri.swiftvis.plot;

import javax.swing.tree.TreeNode;
import javax.swing.JComponent;

import edu.swri.swiftvis.GraphElement;

import java.awt.Graphics2D;
import java.io.Serializable;
import java.util.Hashtable;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.geom.Rectangle2D;

/**
 * This is the base interface for things that are placed on plots are graphical * entities. *  * !!! I will need to add some methods to this so that it can handle things like * user mouse clicks, but I'm going to leave that out right now.  Part of the * difficulty is that the mouse clicks could be for interactive tools like what * I use for doing my data analysis, or they could be for drawing things into * the plots or changing parameters like in Excel.  I still need to think about * exactly what the objective of this tool is.  I think the main objective is * for data analysis and visualization to allow users to quickly and easily find * trends in their data or see things in new ways.  Making high quality plots for * printing is probably less important.
 */

public interface PlotObject extends TreeNode,Serializable {
    /**
     * Draw this object on the provided graphics.
     */
    void draw(Graphics2D g,Rectangle2D bounds,float fontScale);
    
    /**
     * Draw the object without buffering so it is a vector image.
     */
    void print(Graphics2D g,Rectangle2D bounds);

    /**
     * Returns a panel that can be used to set the properties of this plot
     * object.
     */
    JComponent getPropertiesPanel();

    /**
     * Sends a message up the tree to redraw the screen.
     */
    void fireRedraw();

    /**
     * Send a message down the tree that current draw buffers are invalid.
     * This generally happens because data has changed.
     */
    void forceRedraw();
    
    PlotObject copy(PlotSpec p);
    
    void relink(Hashtable<GraphElement,GraphElement> linkHash);
    
    void mousePressed(MouseEvent e,double mx,double my);
    void mouseReleased(MouseEvent e,double mx,double my);
    void mouseClicked(MouseEvent e,double mx,double my);
    void mouseMoved(MouseEvent e,double mx,double my);
    void mouseDragged(MouseEvent e,double mx,double my);
    void keyPressed(KeyEvent e);
    void keyReleased(KeyEvent e);
    void keyTyped(KeyEvent e);
}
