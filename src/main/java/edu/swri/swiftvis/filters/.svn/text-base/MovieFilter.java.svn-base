/* Generated by Together */

package edu.swri.swiftvis.filters;

import java.awt.*;

import javax.swing.*;

import java.awt.event.*;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.LinkedList;
import java.util.List;

import javax.swing.event.*;

import edu.swri.swiftvis.DataElement;
import edu.swri.swiftvis.DataFormula;
import edu.swri.swiftvis.DataSource;
import edu.swri.swiftvis.GraphElement;
import edu.swri.swiftvis.GraphPanel;
import edu.swri.swiftvis.OptionsData;
import edu.swri.swiftvis.plot.Plot;
import edu.swri.swiftvis.util.EditableBoolean;
import edu.swri.swiftvis.util.EditableDouble;
import edu.swri.swiftvis.util.EditableInt;
import edu.swri.swiftvis.util.EditableString;

/**
* This filter is designed so that people can easily view many "slices" through
* a given dimension of a data set.  The most standard usage is to use groups with
* the grouping value being time to watch the evolution of a system.  However, the
* groups can be done on anything the data set is sorted on and groups do not have
* to be used. 
**/
public class MovieFilter extends AbstractSingleSourceFilter {
	public MovieFilter() {
		startToTake=0;
	}
    
    private MovieFilter(MovieFilter c,List<GraphElement> l) {
        super(c,l);
        numToTake=new EditableInt(c.numToTake.getValue());
        numToAdvance=new EditableInt(c.numToAdvance.getValue());
        useGroups=new EditableBoolean(c.useGroups.getValue());
        groupFormula=new DataFormula(c.groupFormula);
        takeUpTo=new EditableBoolean(c.takeUpTo.getValue());
        pauseLength=new EditableInt(c.pauseLength.getValue());
        startToTake=c.startToTake;
        numElements=c.numElements;
    }

	public String getDescription(){ return "Movie Filter"; }

	public static String getTypeDescription(){ return "Movie Filter"; }

    @Override
	public void sourceAltered(DataSource source) {
	    super.sourceAltered(source);
	    if(sliderFrame!=null) {
	        sliderFrame.rescaleSlider();
	    }
	}

    @Override
    public void redo() {
        super.redo();
        if(sliderFrame!=null) {
            sliderFrame.rescaleSlider();
        }
    }

	protected void setupSpecificPanelProperties(){
		JPanel formPanel=new JPanel(new BorderLayout());
		JPanel northPanel=new JPanel(new GridLayout(9,1));
		JPanel innerPanel=new JPanel(new BorderLayout());
		innerPanel.add(new JLabel("Number in a frame"),BorderLayout.WEST);
		innerPanel.add(numToTake.getTextField(new EditableInt.Listener() {
		    public void valueChanged() { checkNumToTake(); }
		}),BorderLayout.CENTER);
		northPanel.add(innerPanel);
		innerPanel=new JPanel(new BorderLayout());
		innerPanel.add(new JLabel("Number to advance"),BorderLayout.WEST);
		innerPanel.add(numToAdvance.getTextField(new EditableInt.Listener() {
		    public void valueChanged() { checkNumToAdvance(); }
		}),BorderLayout.CENTER);
		northPanel.add(innerPanel);
		northPanel.add(useGroups.getCheckBox("Use Groups?",null));

		innerPanel=new JPanel(new BorderLayout());
		innerPanel.add(new JLabel("Group Formula"),BorderLayout.WEST);
		innerPanel.add(groupFormula.getTextField(null),BorderLayout.CENTER);
		northPanel.add(innerPanel);
        
        northPanel.add(takeUpTo.getCheckBox("Cummulative? (Take all elements up to position.)",null));
		
		innerPanel=new JPanel(new BorderLayout());
		innerPanel.add(new JLabel("Pause in milliseconds"),BorderLayout.WEST);
		innerPanel.add(pauseLength.getTextField(null),BorderLayout.CENTER);
		northPanel.add(innerPanel);
		JButton button=new JButton("Show Control Frame");
		button.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) { showSlider(); }
		} );
		northPanel.add(button);
        button=new JButton("Export Movie Images");
        button.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if(exportDialog==null) {
                    exportDialog=new MovieExportDialog();
                }
                exportDialog.setVisible(true);
            }
        } );
        northPanel.add(button);
		formPanel.add(northPanel,BorderLayout.NORTH);

		button=new JButton("Propagate Changes");
		button.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) { abstractRedoAllElements(); }
		} );
		formPanel.add(button,BorderLayout.SOUTH);
		propPanel.add("Settings",formPanel);
	}

	/**
	 * Tells you what a particular parameter is used for.
	 */
	public String getParameterDescription(int stream, int which){
		if(input==null) return "None";
		return input.getParameterDescription(stream,which);
	}

	/**
	 * Tells you what a particular value is used for.
	 */
	public String getValueDescription(int stream, int which){
		if(input==null) return "None";
		return input.getValueDescription(stream,which);
	}

	public int getNumParameters(int stream){
		if(input==null) return 0;
		return input.getNumParameters(stream);
	}

	public int getNumValues(int stream){
		if(input==null) return 0;
		return input.getNumValues(stream);
	}

	public DataElement getElement(int i, int stream){
	    if(takeUpTo.getValue() || numToTake.getValue()<1) return input.getElement(i, stream);
	    return input.getElement(i+startToTake, stream);
	}

    /**
     * Returns the number of data elements that this source has in it.  I'm using
     * this instead of an iterator because direct access is much more efficient
     * when trying to make tables of data.
     * @return The number of data elements in this source.
     */
    public int getNumElements(int stream) {
        if (input == null)
            return 0;
        if(takeUpTo.getValue())
            return Math.min(startToTake+numElements, input.getNumElements(stream));
        if (numToTake.getValue() < 1)
            return 0;
        return Math.min(numElements, input.getNumElements(stream) - startToTake);
    }
    
    public MovieFilter copy(List<GraphElement> l) {
        return new MovieFilter(this,l);
    }

    public GraphPanel getGraphPanel() {
        return graphPanel;
    }
    
    public void setGraphPanel(GraphPanel gp) {
        graphPanel=gp;
    }
    
    protected boolean doingInThreads() {
		return false;
	}
    
	protected void redoAllElements() {
		if(input==null) return;
		sizeDataVectToInputStreams();
		if(numToTake.getValue()<1) {
			return;
		}
		if(useGroups.getValue()) {
			int lastElement=startToTake;
			int max=groupFormula.getSafeElementRange(MovieFilter.this, 0)[1];
			for(int i=0; i<numToTake.getValue() && lastElement<max; ++i) {
				lastElement=doGroupSelection(lastElement,max,groupFormula);
			}
			numElements=lastElement-startToTake;
		} else {
			numElements=numToTake.getValue();
		}
	}
    
	/**
	 * Returns the elements after the group that begins at startIndex.
	 * @param startIndex The index to start the group at.
	 * @return The index of the first element not in the group.
	 */
	private int doGroupSelection(int startIndex,int maxIndex,DataFormula sortFormula) {
		double val=sortFormula.valueOf(this,0, startIndex);
		int i;
		for(i=startIndex+1; i<maxIndex && sortFormula.valueOf(this,0, i)==val; ++i);
		return i;
	}
	
	private void showSlider() {
		if(sliderFrame==null) {
			sliderFrame=new SliderFrame();
		}
		sliderFrame.setVisible(true);
	}
	
	private void checkNumToTake() {
	    if(numToTake.getValue()<0) {
	        numToTake.setValue(0);
	        JOptionPane.showMessageDialog(propPanel,"Value can't be negative.  Use 0 for cummulative.");
	    }
	}
	
	private void checkNumToAdvance() {
	    if(numToAdvance.getValue()<1) {
	        numToAdvance.setValue(1);
	        JOptionPane.showMessageDialog(propPanel,"Value must be positive.");
	    }
	}

    private EditableInt numToTake = new EditableInt(1);
    private EditableInt numToAdvance = new EditableInt(1);
    private EditableBoolean useGroups = new EditableBoolean(true);
    private DataFormula groupFormula = new DataFormula("v[0]");
    private EditableBoolean takeUpTo=new EditableBoolean(false);
    private EditableInt pauseLength = new EditableInt(100);
    private int startToTake;
	private int numElements;
    
    private transient SliderFrame sliderFrame;
    private transient MovieExportDialog exportDialog;
    private transient GraphPanel graphPanel;

    private static final long serialVersionUID=23568972346l;
	
	private class SliderFrame extends JFrame {
		public SliderFrame() {
			getContentPane().setLayout(new BorderLayout());
			button=new JButton("Start");
			button.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					if(button.getText().equals("Start")) {
						button.setText("Stop");
						keepGoing=true;
						startAnimation();
					} else {
						button.setText("Start");
						keepGoing=false;
					}
				}
			} );
			getContentPane().add(button,BorderLayout.WEST);
			slider=new JSlider();
			slider.setMinimum(0);
			rescaleSlider();
			slider.addChangeListener(new ChangeListener() {
				public void stateChanged(ChangeEvent e) { sliderValueChanged(); }
			} );
			getContentPane().add(slider,BorderLayout.CENTER);
            JPanel eastPanel=new JPanel(new GridLayout(1,3));
            JButton b2=new JButton("Prev");
            b2.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    rollbackSlider();
                }
            });
            eastPanel.add(b2);
            b2=new JButton("Redraw");
            b2.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    abstractRedoAllElements();
                }
            });
            eastPanel.add(b2);
            b2=new JButton("Next");
            b2.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    advanceSlider();
                }
            });
            eastPanel.add(b2);
            getContentPane().add(eastPanel,BorderLayout.EAST);
            pack();
			setSize(700,getSize().height);
		}
		
		public void rescaleSlider() {
		    if(input==null) return;
            int max;
            if(useGroups.getValue()) {
                int grpCnt=0;
                max=groupFormula.getSafeElementRange(MovieFilter.this, 0)[1]-1;
                while(grpCnt<numToTake.getValue()) {
                    double val=groupFormula.valueOf(MovieFilter.this,0, max);
                    while(groupFormula.valueOf(MovieFilter.this,0, max)==val) max--;
                    grpCnt++;
                }
                ++max;
            } else {
                max=groupFormula.getSafeElementRange(MovieFilter.this, 0)[1]-numToTake.getValue();
            }
			slider.setMaximum(max);
			slider.setMajorTickSpacing(input.getNumElements(0)/10);
            slider.setValue(startToTake);
		}
		
		private void startAnimation() {
			(new Thread(new Runnable() {
				public void run() {
					try {
						while(keepGoing) { 
							advanceSlider();
							Thread.sleep(pauseLength.getValue());
						}
					} catch(InterruptedException e) {
						e.printStackTrace();
					}
				}
			} )).start();
		}
		
		private void sliderValueChanged() {
			if(autoMove) return;
			if(useGroups.getValue() && slider.getValue()>0) {
				startToTake=slider.getValue();
                double val=groupFormula.valueOf(MovieFilter.this,0, startToTake);
                while(startToTake>=0 && groupFormula.valueOf(MovieFilter.this,0, startToTake)==val) {
                    startToTake--;
                }
                startToTake++;
			} else {
				startToTake=slider.getValue();
			}
			abstractRedoAllElements();
			//GraphPanel.instance().blockWhileUpdatesScheduled();
		}
		
		private void advanceSlider() {
			int beginStart=startToTake;
			if(useGroups.getValue()) {
				int max=slider.getMaximum();
				for(int i=0; i<numToAdvance.getValue() && startToTake<=max; i++) {
					startToTake=doGroupSelection(startToTake,max,groupFormula);
				}
			} else {
				int tmp=startToTake+numToAdvance.getValue();
				if(tmp<=slider.getMaximum()) startToTake=tmp;
			}
			if(startToTake==beginStart || startToTake>=slider.getMaximum()) {
				button.setText("Start");
				keepGoing=false;
			}
			autoMove=true;
			slider.setValue(startToTake);
			abstractRedoAllElements();
			GraphPanel.instance().blockWhileUpdatesScheduled();
			autoMove=false;
		}
		
        private void rollbackSlider() {
            startToTake--;
            if(useGroups.getValue()) {
                for(int i=0; i<numToAdvance.getValue() && startToTake>=0; i++) {
                    double val=groupFormula.valueOf(MovieFilter.this,0, startToTake);
                    while(startToTake>=0 && groupFormula.valueOf(MovieFilter.this,0, startToTake)==val)
                        startToTake--;
                }
            } else {
                startToTake-=numToAdvance.getValue();
                if(startToTake<0) startToTake=-1;
            }
            startToTake++;
            autoMove=true;
            slider.setValue(startToTake);
            abstractRedoAllElements();
			GraphPanel.instance().blockWhileUpdatesScheduled();
            autoMove=false;
        }
        
		private JSlider slider;
		private JButton button;
		private boolean keepGoing;
		private boolean autoMove=false;
        private static final long serialVersionUID=1346098746l;
	}
    
    private class MovieExportDialog {
        public MovieExportDialog() {
            List<Plot> plots=new LinkedList<Plot>();
            for(GraphElement ge:graphPanel.getElements()) {
                if(ge instanceof Plot) {
                    plots.add((Plot)ge);
                }
            }
            if(plots.isEmpty()) {
                JOptionPane.showMessageDialog(propPanel,"There are no plot elements to make a movie using.");
                return;
            }
            Component rover=propPanel;
            while(!(rover instanceof JFrame)) {
                rover=rover.getParent();
            }
            dialog=new JDialog((JFrame)rover,"Movie Export",true);
            dialog.getContentPane().setLayout(new BorderLayout());
            JPanel northPanel=new JPanel(new GridLayout(7,1));
            plot=plots.get(0);
            final JComboBox plotBox=new JComboBox(plots.toArray());
            plotBox.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    plot=(Plot)plotBox.getSelectedItem();
                    if(plot.getSurface()!=null) {
                        width.setValue(plot.getSurface().getWidth());
                        height.setValue(plot.getSurface().getHeight());                        
                    }
                }
            });
            northPanel.add(plotBox);
            JPanel panel=new JPanel(new BorderLayout());
            panel.add(new JLabel("Width"),BorderLayout.WEST);
            panel.add(width.getTextField(null),BorderLayout.CENTER);
            northPanel.add(panel);
            panel=new JPanel(new BorderLayout());
            panel.add(new JLabel("Height"),BorderLayout.WEST);
            panel.add(height.getTextField(null),BorderLayout.CENTER);
            northPanel.add(panel);
            panel=new JPanel(new BorderLayout());
            panel.add(new JLabel("Font Scale"),BorderLayout.WEST);
            panel.add(scale.getTextField(null),BorderLayout.CENTER);
            northPanel.add(panel);
            final JLabel dirLabel=new JLabel("No directory selected");
            northPanel.add(dirLabel);
            JButton button=new JButton("Select Directory");
            button.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    JFileChooser chooser=new JFileChooser(OptionsData.instance().getLastDir());
                    chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                    if(chooser.showOpenDialog(dialog)==JFileChooser.CANCEL_OPTION) return;
                    directory=chooser.getSelectedFile();
                    dirLabel.setText(directory.getAbsolutePath());
                }
            });
            northPanel.add(button);
            panel=new JPanel(new BorderLayout());
            panel.add(new JLabel("File Name Prefix"),BorderLayout.WEST);
            panel.add(baseName.getTextField(null),BorderLayout.CENTER);
            northPanel.add(panel);
            dialog.add(northPanel,BorderLayout.NORTH);
            preview=new PreviewPanel();
            dialog.add(preview,BorderLayout.CENTER);
            JPanel southPanel=new JPanel(new GridLayout(2,2));
            frameLabel=new JLabel("Frame:");
            southPanel.add(frameLabel);
            groupLabel=new JLabel("Group Value:");
            southPanel.add(groupLabel);
            final JButton exportButton=new JButton("Export Images");
            exportButton.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    if(directory==null) {
                        JOptionPane.showMessageDialog(dialog,"You must select a directory to write to.");
                        return;
                    }
                    writeThread=new Thread(new Runnable() {
                        public void run() {
                            exportButton.setEnabled(false);
                            makeMovie();
                            exportButton.setEnabled(true);
                        }
                    });
                    writeThread.start();
                }
            });
            southPanel.add(exportButton);
            button=new JButton("Cancel");
            button.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    setVisible(false);
                }
            });
            southPanel.add(button);
            dialog.add(southPanel,BorderLayout.SOUTH);
            int height=dialog.getContentPane().getPreferredSize().height+dialog.getInsets().bottom+dialog.getInsets().top+50;
            int width=dialog.getContentPane().getPreferredSize().width+dialog.getInsets().left+dialog.getInsets().right;
            dialog.setSize(new Dimension(width,height));
        }
        public void setVisible(boolean b) {
            if(b && plot!=null && plot.getSurface()!=null) {
                width.setValue(plot.getSurface().getWidth());
                height.setValue(plot.getSurface().getHeight());                        
            }
            canceled=!b;
            dialog.setVisible(b);
        }
        private void makeMovie() {
            int num=0;
            int[] range=groupFormula.getSafeElementRange(MovieFilter.this, 0);
            DataFormula.checkRangeSafety(range,MovieFilter.this);
            int originalStart=startToTake;
            startToTake=range[0];
            int max=range[1];
            img=new BufferedImage(width.getValue(),height.getValue(),BufferedImage.TYPE_INT_ARGB);
            while(startToTake<max && !canceled) {
                abstractRedoAllElements();
                GraphPanel.instance().blockWhileUpdatesScheduled();
                writeImage(num);
                num++;
                if(useGroups.getValue()) {
                    for(int i=0; i<numToAdvance.getValue() && startToTake<max; i++) {
                        startToTake=doGroupSelection(startToTake,max,groupFormula);
                    }
                } else {
                    int tmp=startToTake+numToAdvance.getValue();
                    if(tmp<=max) startToTake=tmp;
                }
            }
            startToTake=originalStart;
            abstractRedoAllElements();
            dialog.setVisible(false);
        }
        private void writeImage(int num) {
            Graphics2D g=img.createGraphics();
            g.setBackground(Color.white);
            g.clearRect(0,0,width.getValue(),height.getValue());
            plot.getPlotSpec().draw(g,new Rectangle2D.Double(0,0,width.getValue(),height.getValue()),(float)scale.getValue());
            preview.setImage(img);
            frameLabel.setText("Frame: "+num);
            groupLabel.setText("Group Value: "+groupFormula.valueOf(MovieFilter.this,0, startToTake));
            try {
                File file=new File(directory,baseName.getValue()+makeNum(num)+".png");
                javax.imageio.ImageIO.write(img,"png",file);
                Thread.sleep(50);
            } catch(java.io.IOException e) {
                JOptionPane.showMessageDialog(dialog,"There was an exception trying to write the file.");
                e.printStackTrace();
            } catch(InterruptedException e) {
                e.printStackTrace();
            }
        }
        private String makeNum(int num) {
            String ret=Integer.toString(num);
            while(ret.length()<5) {
                ret="0"+ret;
            }
            return ret;
        }
        private JDialog dialog;
        private PreviewPanel preview;
        private Plot plot;
        private EditableInt width=new EditableInt(1000);
        private EditableInt height=new EditableInt(1000);
        private EditableDouble scale=new EditableDouble(1);
        private File directory;
        private EditableString baseName=new EditableString("movieImg");
        private BufferedImage img;
        private JLabel frameLabel;
        private JLabel groupLabel;
        private Thread writeThread;
        private boolean canceled;
    }
    
    private static class PreviewPanel extends JPanel {
        public void setImage(BufferedImage i) {
            img=i;
            repaint();
        }
        @Override public Dimension getPreferredSize() {
            return new Dimension(400,400);
        }
        protected void paintComponent(Graphics g) {
            if(img==null) {
                g.drawString("No Current Image",10,50);
                return;
            }
            g.drawImage(img,0,0,getWidth(),getHeight(),this);
        }
        private BufferedImage img;
        private static final long serialVersionUID=89053769236348l;
    }
}
