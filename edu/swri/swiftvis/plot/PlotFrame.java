/* Generated by Together */

package edu.swri.swiftvis.plot;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.File;

import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

import edu.swri.swiftvis.OptionsData;
import edu.swri.swiftvis.util.EditableDouble;
import edu.swri.swiftvis.util.EditableInt;

public class PlotFrame extends JFrame {
    public PlotFrame(PlotSpec theSpec,final Plot plot) {
        spec=theSpec;
        JMenuBar menuBar=new JMenuBar();
        JMenu menu=new JMenu("File");
        JMenuItem item=new JMenuItem("Export Image");
        item.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) { exportImage(); }
        } );
        menu.add(item);
        item=new JMenuItem("Print");
        item.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) { printImage(); }
        } );
        menu.add(item);
        menu.addSeparator();
        item=new JMenuItem("Close");
        item.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) { setVisible(false); }
        } );
        menu.add(item);
        menuBar.add(menu);
        setJMenuBar(menuBar);
        surface=new PlotSurface(spec);
        getContentPane().add(surface);
        setSize(OptionsData.instance().getPlotFrameWidth(),OptionsData.instance().getPlotFrameHeight());
        addWindowListener(new WindowListener() {
            @Override
            public void windowOpened(WindowEvent e) {
                plot.frameAltered();
            }
            @Override
            public void windowClosing(WindowEvent e) {
                plot.frameAltered();
            }
            @Override
            public void windowClosed(WindowEvent e) {
                plot.frameAltered();
            }
            @Override
            public void windowIconified(WindowEvent e) {
                plot.frameAltered();
            }
            @Override
            public void windowDeiconified(WindowEvent e) {
                plot.frameAltered();
            }
            @Override
            public void windowActivated(WindowEvent e) {
                plot.frameAltered();
            }
            @Override
            public void windowDeactivated(WindowEvent e) {
                plot.frameAltered();
            }
        });
        addComponentListener(new ComponentListener() {
            @Override
            public void componentResized(ComponentEvent e) {
                plot.frameAltered();
            }
            @Override
            public void componentMoved(ComponentEvent e) {
                plot.frameAltered();
            }
            @Override
            public void componentShown(ComponentEvent e) {
                plot.frameAltered();
            }
            @Override
            public void componentHidden(ComponentEvent e) {
                plot.frameAltered();
            }
        });
    }

    public PlotSurface getSurface() {
        return surface;
    }


    private void exportImage() {
        (new ExportDialog(this,spec)).setVisible(true);
    }

    private void printImage() {
    	PrinterJob pj=PrinterJob.getPrinterJob();
    	pj.setPrintable(spec);
    	if(pj.printDialog()) {
    		try {
				pj.print();
    		} catch(PrinterException e) {
    			e.printStackTrace();
    		}
    	}
    }

    private PlotSurface surface;

    private PlotSpec spec;

    private static final long serialVersionUID=8967469867346l;

    private class ExportDialog extends JDialog {
        public ExportDialog(JFrame theFrame,PlotSpec theSpec) {
            super(theFrame,"Export Options");
            frame=theFrame;
            spec=theSpec;
            Box outerBox=new Box(BoxLayout.Y_AXIS);
            Box innerBox=new Box(BoxLayout.X_AXIS);
            innerBox.add(new JLabel("Image Width"));
            innerBox.add(width.getTextField(null));
            outerBox.add(innerBox);
            innerBox=new Box(BoxLayout.X_AXIS);
            innerBox.add(new JLabel("Image Height"));
            innerBox.add(height.getTextField(null));
            outerBox.add(innerBox);
            innerBox=new Box(BoxLayout.X_AXIS);
            innerBox.add(new JLabel("Font Scale"));
            innerBox.add(scale.getTextField(null));
            outerBox.add(innerBox);
            innerBox=new Box(BoxLayout.X_AXIS);
            innerBox.add(new JLabel("File"));
            fileField=new JTextField(file.getAbsolutePath());
            fileField.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) { setFileName(); }
            } );
            fileField.addFocusListener(new FocusAdapter() {
                @Override
                public void focusLost(FocusEvent e) { setFileName(); }
            } );
            innerBox.add(fileField);
            JButton button=new JButton("Browse");
            button.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) { browse(); }
            } );
            innerBox.add(button);
            outerBox.add(innerBox);
            innerBox=new Box(BoxLayout.X_AXIS);
            button=new JButton("Export");
            button.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) { export(); }
            } );
            innerBox.add(button);
            button=new JButton("Cancel");
            button.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) { setVisible(false); dispose(); }
            } );
            innerBox.add(button);
            outerBox.add(innerBox);
            getContentPane().add(outerBox);
            
			int height=outerBox.getPreferredSize().height+getInsets().bottom+getInsets().top+50;
			int width=outerBox.getPreferredSize().width+getInsets().left+getInsets().right;
			setSize(new Dimension(width,height));
        }

        private void setFileName() {
            file=new File(fileField.getText());
        }

        private void browse() {
            JFileChooser chooser=new JFileChooser(OptionsData.instance().getLastDir());
            if(chooser.showSaveDialog(frame)==JFileChooser.APPROVE_OPTION) {
	            file=chooser.getSelectedFile();
                fileField.setText(file.getAbsolutePath());
                OptionsData.instance().setLastDir(file.getParentFile());
            }
        }

        private void export() {
            BufferedImage img=new BufferedImage(width.getValue(),height.getValue(),BufferedImage.TYPE_INT_ARGB);
            Graphics2D g=img.createGraphics();
            g.setBackground(Color.white);
            g.clearRect(0,0,width.getValue(),height.getValue());
            spec.draw(g,new Rectangle2D.Double(0,0,width.getValue(),height.getValue()),(float)scale.getValue());
            try {
				javax.imageio.ImageIO.write(img,"png",file);
            } catch(java.io.IOException e) {
            	JOptionPane.showMessageDialog(this,"There was an exception trying to write the file.");
            	e.printStackTrace();
            }
        }

        private PlotSpec spec;

        private JFrame frame;
        private EditableInt width=new EditableInt(surface.getWidth());
        private EditableInt height=new EditableInt(surface.getHeight());
        private EditableDouble scale=new EditableDouble(1);
        private File file=new File(OptionsData.instance().getLastDir(),"export.png");
        private JTextField fileField;
        private static final long serialVersionUID=4570897236l;
    }
}
