/* Generated by Together */

package edu.swri.swiftvis.plot.util;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;


import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;

public class FontOptions implements java.io.Serializable {
    public FontOptions(FontUser fu) {
        user=fu;
        font=new Font("Serif",Font.PLAIN,20);
    }

    public FontOptions(FontUser fu,Font defFont) {
        user=fu;
        font=defFont;
    }

    public Font getFont() {
        return font;
    }

    public Font getFont(float scale) {
        if(scale==1) return font;
        return font.deriveFont(font.getSize2D()*scale);
    }

    public void edit() {
        if(selector==null) {
            selector=new FontSelector();
        }
        selector.setVisible(true);
    }

    public FontRenderContext getFRC() {
        if (frc == null)
            frc = new FontRenderContext(new AffineTransform(), true, true);
        return frc;
    }

    private FontUser user;
    private Font font;

    private transient FontSelector selector;
    private transient FontRenderContext frc;

    private static final long serialVersionUID=57902395867231237l;

    private class FontSelector extends JFrame {
        public FontSelector() {
    		getContentPane().setLayout(new GridLayout(1,1));
    		Box innerBox=Box.createVerticalBox();
    		getContentPane().add(innerBox);
    		
			// font
			String[] fontOptions=GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();
			JComboBox comboBox=new JComboBox(fontOptions);
			comboBox.setSelectedItem(font.getName());
			comboBox.addActionListener(new ActionListener() {
				@Override
                public void actionPerformed(ActionEvent e) {
					font=new Font((String)(((JComboBox)e.getSource()).getSelectedItem()),font.getStyle(),font.getSize());
					font=font.deriveFont(font.getSize2D());
					if(user!=null) user.applyFont(FontOptions.this);
				}
			} );
			innerBox.add(comboBox);
    		
    		// style
    		JPanel stylePanel=new JPanel(new GridLayout(2,1));
    		final JCheckBox boldCheckBox=new JCheckBox("Bold");
    		boldCheckBox.setSelected((font.getStyle()&Font.BOLD)!=0);
    		boldCheckBox.addActionListener(new ActionListener() {
				@Override
                public void actionPerformed(ActionEvent e) {
					if(boldCheckBox.isSelected()) {
						font=font.deriveFont(font.getStyle()|Font.BOLD);
					} else {
						font=font.deriveFont(font.getStyle()&(~Font.BOLD));
					}
                    if(user!=null) user.applyFont(FontOptions.this);
				}
    		} );
    		stylePanel.add(boldCheckBox);
			final JCheckBox italicCheckBox=new JCheckBox("Italic");
			italicCheckBox.setSelected((font.getStyle()&Font.BOLD)!=0);
			italicCheckBox.addActionListener(new ActionListener() {
				@Override
                public void actionPerformed(ActionEvent e) {
					if(italicCheckBox.isSelected()) {
						font=font.deriveFont(font.getStyle()|Font.ITALIC);
					} else {
						font=font.deriveFont(font.getStyle()&(~Font.ITALIC));
					}
                    if(user!=null) user.applyFont(FontOptions.this);
				}
			} );
			stylePanel.add(italicCheckBox);
    		innerBox.add(stylePanel);

			// size
			JPanel panel=new JPanel(new BorderLayout());
			panel.add(new JLabel("Point Size"),BorderLayout.WEST);
			final JTextField field=new JTextField(Float.toString(font.getSize2D()));
			field.addFocusListener(new FocusAdapter() {
				@Override
                public void focusLost(FocusEvent e) {
					try {
						font=font.deriveFont(Float.parseFloat(field.getText()));
                        if(user!=null) user.applyFont(FontOptions.this);
					} catch(NumberFormatException ex) {
						JOptionPane.showMessageDialog(e.getComponent(),"This must be a number.");
						field.setText(Float.toString(font.getSize2D()));						
						ex.printStackTrace();
					}
				}
			} );
			panel.add(field,BorderLayout.CENTER);
			innerBox.add(panel);
            
            // Done Button
            JButton button=new JButton("Done");
            button.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) { setVisible(false); }
            });
            innerBox.add(button);
			
			int height=getPreferredSize().height+getInsets().bottom+getInsets().top;
			int width=getPreferredSize().width+getInsets().left+getInsets().right;
			setSize(new Dimension(width+100,height+50));
    	}
        private static final long serialVersionUID=3223573483434l;
    }
}
