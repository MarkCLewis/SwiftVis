/* Generated by Together */

package edu.swri.swiftvis.plot;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.geom.Rectangle2D;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Hashtable;

import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.tree.TreeNode;

import edu.swri.swiftvis.GraphElement;
import edu.swri.swiftvis.util.IteratorEnumeration;

/**
* This is the serializable class for all the specifications that are used by the
* standard PlotSurface.  It includes a collection of PlotObjects that are
* structured as a tree.  It also has a reference to the Plot object that is
* is being used for so that it can get hold of the various sources.  It is itself
* a PlotObject and will always act as the root of the tree.
*
* List of PlotObject classes:
*   PlotArea2D
*   PlotText
**/
public class PlotSpec implements PlotObject,Printable {
    public PlotSpec(Plot thePlot) {
        plot=thePlot;
        children=new ArrayList<PlotObject>();
    }
    
    public PlotSpec(Plot p,PlotSpec c) {
        plot=p;
        children=new ArrayList<PlotObject>();
        for(PlotObject po:c.children) {
            children.add(po.copy(this));
        }
    }

    public String toString() {
        return "Plot Spec";
    }

    public PlotSurface getSurface() {
        return plot.getSurface();
    }

    public Plot getPlot() {
        return plot;
    }


    //-------------------------------------------------------------------------
    // Methods from PlotObject
    //-------------------------------------------------------------------------

    /**
     * Draw this object on the provided graphics.
     */
    public void draw(Graphics2D g,Rectangle2D bounds,float fontScale){
        g.setPaint(Color.white);
        g.fill(bounds);
        for(PlotObject child:children) {
            child.draw(g,new Rectangle2D.Double(bounds.getX(),bounds.getY(),bounds.getWidth(),bounds.getHeight()),fontScale);
        }
    }
    
	public void print(Graphics2D g,Rectangle2D bounds) {
		for(PlotObject child:children) {
			child.print(g,new Rectangle2D.Double(bounds.getX(),bounds.getY(),bounds.getWidth(),bounds.getHeight()));
		}
	}
	
	public int print(Graphics g,PageFormat pf,int pageIndex) {
		if(pageIndex>=1) return Printable.NO_SUCH_PAGE;
		print((Graphics2D)g,new Rectangle2D.Double(pf.getImageableX(),pf.getImageableY(),pf.getImageableWidth(),pf.getImageableHeight()));
		return Printable.PAGE_EXISTS; 
	}

    /**
     * Returns a panel that can be used to set the properties of this plot
     * object.  I'm not yet certain what this will do for the Spec.  The plot
     * itself also has a properties panel so I'm not certain which one to use.
     * Right now I'm thinking that I'll use both.  The plot one will have a tree
     * at the top and other stuff below.  This one will have buttons to add new
     * things into the plot.
     */
    public JComponent getPropertiesPanel(){
        if(propPanel==null) {
			propPanel=new JPanel();
            JPanel tmpPanel=new JPanel(new GridLayout(5,1));
			JButton button=new JButton("Add Text");
			button.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) { addText(); }
			} );
            tmpPanel.add(button);
			button=new JButton("Add Plot");
			button.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) { addPlot(); }
			} );
            tmpPanel.add(button);
            button=new JButton("Add 3-D Plot");
            button.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) { addPlot3D(); }
            } );
            tmpPanel.add(button);
			button=new JButton("Duplicate");
			button.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) { duplicate(); }
			} );
            tmpPanel.add(button);
            button=new JButton("Remove");
            button.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) { remove(); }
            } );
            tmpPanel.add(button);
			propPanel.add(tmpPanel,BorderLayout.NORTH);
        }
        return propPanel;
    }

    public void setSelected(boolean val){ }

    public void fireRedraw() {
        plot.fireRedraw();
    }

    /**
     * Send a message down the tree that current draw buffers are invalid.
     * This generally happens because data has changed.
     */
    public void forceRedraw(){
        for(PlotObject child:children) {
            child.forceRedraw();
        }
    }

    public PlotSpec copy(PlotSpec p) {
        throw new UnsupportedOperationException("The PlotSpec should be the parent and should not have copy invoked.");
    }
    
    public void relink(Hashtable<GraphElement,GraphElement> linkHash) {
        for(PlotObject child:children) {
            child.relink(linkHash);
        }                
    }

    public void mousePressed(MouseEvent e,double mx,double my) {
        for(PlotObject child:children) {
            child.mousePressed(e,mx,my);
        }        
    }
    public void mouseReleased(MouseEvent e,double mx,double my) {
        for(PlotObject child:children) {
            child.mouseReleased(e,mx,my);
        }                
    }
    public void mouseClicked(MouseEvent e,double mx,double my) {
        for(PlotObject child:children) {
            child.mouseClicked(e,mx,my);
        }        
    }
    public void mouseMoved(MouseEvent e,double mx,double my) {
        for(PlotObject child:children) {
            child.mouseMoved(e,mx,my);
        }        
    }
    public void mouseDragged(MouseEvent e,double mx,double my) {
        for(PlotObject child:children) {
            child.mouseDragged(e,mx,my);
        }        
    }
    public void keyPressed(KeyEvent e) {
        for(PlotObject child:children) {
            child.keyPressed(e);
        }        
    }
    public void keyReleased(KeyEvent e) {
        for(PlotObject child:children) {
            child.keyReleased(e);
        }        
    }
    public void keyTyped(KeyEvent e) {
        for(PlotObject child:children) {
            child.keyTyped(e);
        }        
    }

    //-------------------------------------------------------------------------
    // Methods from TreeNode
    //-------------------------------------------------------------------------
    

    public Enumeration<TreeNode> children() {
        final Enumeration<PlotObject> en=new IteratorEnumeration<PlotObject>(children.iterator());
        return new Enumeration<TreeNode>() {
            public boolean hasMoreElements() {
                return en.hasMoreElements();
            }
            public TreeNode nextElement() {
                return en.nextElement();
            }
        };
    }

	public boolean getAllowsChildren() { return true; }

    public TreeNode getChildAt(int index) { return children.get(index); }

    public int getChildCount() { return children.size(); }

	public int getIndex(TreeNode node) { return children.indexOf(node); }

    public TreeNode getParent() { return null; }

    public boolean isLeaf() { return children.size()==0; }

    //-------------------------------------------------------------------------
    // Private methods
    //-------------------------------------------------------------------------
    private void addText() {
        PlotText text=new PlotText(this);
        children.add(text);
        plot.treeAltered(this,text);
    }

    private void addPlot() {
        PlotArea2D plotArea=new PlotArea2D(this);
        children.add(plotArea);
        plot.treeAltered(this,plotArea);
    }
    
    private void addPlot3D() {
        PlotArea3D plotArea=new PlotArea3D(this);
        children.add(plotArea);
        plot.treeAltered(this,plotArea);
    }
    
    private void remove() {
        Object po=JOptionPane.showInputDialog(propPanel,"Which object do you want to remove?",
                "Remove Selection",JOptionPane.PLAIN_MESSAGE,null,children.toArray(),children.get(0));
        if(po!=null) {
            children.remove(po);
            plot.treeAltered(this,null);
        }
    }

    private void duplicate() {
        Object po=JOptionPane.showInputDialog(propPanel,"Which object do you want to duplicate?",
                "Duplicate Selection",JOptionPane.PLAIN_MESSAGE,null,children.toArray(),children.get(0));
        if(po!=null) {
            children.add(((PlotObject)po).copy(this));
            plot.treeAltered(this,null);
        }
    }

    private Plot plot;

    private ArrayList<PlotObject> children;

    private transient JPanel propPanel;

    private static final long serialVersionUID=5478097025346l;
}
