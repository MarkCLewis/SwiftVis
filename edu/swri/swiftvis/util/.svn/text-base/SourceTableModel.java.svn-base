/* Generated by Together */

package edu.swri.swiftvis.util;
import javax.swing.JTable;
import javax.swing.table.*;

import edu.swri.swiftvis.DataElement;
import edu.swri.swiftvis.DataSource;

public class SourceTableModel extends AbstractTableModel {
    public SourceTableModel(JTable table,DataSource ds) {
        source=ds;
        this.table=table;
		table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
    }
    
    private boolean initColumns() {
    	int numElems=source.getNumElements(stream)<100?source.getNumElements(stream):100;
        for (int row=0; row<numElems; row++) {
            DataElement de=source.getElement(row, stream);
            for (int column=0; column<table.getColumnCount(); column++) {
				if (column-source.getNumParameters(0)<0) return true;
                Double ret;
                if(column-source.getNumParameters(0)<de.getNumValues()) {
                    ret=new Double(de.getValue(column-source.getNumParameters(0)));
                } else {
                    ret=0.0;
                }
        		TableColumn col=table.getColumnModel().getColumn(column);
        		if (col.getPreferredWidth()<(int)(ret.toString().length()*8.5)) {
        			col.setPreferredWidth((int)(ret.toString().length()*8.5));
        		}
    		}
    	}
    	return false;
    }
    
    public void setStream(int s) {
        if(s<0) s=0;
        stream=s;
        firstRound=true;
        fireTableStructureChanged();
    }
    
    public void setSource(DataSource ds) {
        source=ds;
        firstRound=true;
        fireTableStructureChanged();
    }

	public int getRowCount() {
	    if(source==null) return 0;
        return source.getNumElements(stream);
    }

	public int getColumnCount() {
        if(source==null) return 0;
        return source.getNumParameters(stream)+source.getNumValues(stream);
    }

	public Object getValueAt(int row, int column) {
		if (firstRound) {
			firstRound=initColumns();
		}
        if(row>=source.getNumElements(stream)) return "";
        DataElement de=source.getElement(row,stream);
        try {
	        if(column<source.getNumParameters(stream)) {
                if(column<de.getNumParams()) return Integer.valueOf(de.getParam(column));
                else return "";
        	} else {
                if(column<de.getNumValues()+source.getNumParameters(stream)) return Double.valueOf(de.getValue(column-source.getNumParameters(stream)));
                else return "";
    	    }
        } catch(Exception e) {
            return "";
        }
    }

    public String getColumnName(int column) {
        try {
	        if(column<source.getNumParameters(stream)) {
    	        String ret="p["+column+"]="+source.getParameterDescription(stream,column);
                if(ret==null) return "Not Specified";
                return ret;
        	} else {
	            String ret="v["+(column-source.getNumParameters(stream))+"]="+source.getValueDescription(stream, column-source.getNumParameters(stream));
                if(ret==null) return "Not Specified";
                return ret;
    	    }
        } catch(Exception e) {
            return "Not Specified";
        }
    }

    private DataSource source;
    private int stream=0;
    private JTable table;
    private boolean firstRound=true;
    private static final long serialVersionUID=75469873246622354l;

}
